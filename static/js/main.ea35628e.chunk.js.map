{"version":3,"sources":["components/Scroll.js","components/Map.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","ISS_URL","img","src","alt","SpaceStation","Map","state","center","lat","lng","zoom","getCoordinates","fetch","then","res","json","data","setState","iss_position","latitude","longitude","this","interval","setInterval","clearInterval","console","log","className","width","bootstrapURLKeys","key","process","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6PAaeA,EAVA,SAACC,GACd,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAArE,SACGJ,EAAMK,Y,iBCFPC,G,MAAU,2CAGVC,EAAM,qBAAKC,IAAI,YAAYC,IAAI,MAAML,OAAO,SAE5CM,EAAe,SAAC,GAAD,IAAGH,EAAH,EAAGA,IAAH,OAAa,8BAAMA,KA+DzBI,E,4MA5DbC,MAAQ,CACNC,OAAQ,CACNC,IAAK,EACLC,IAAK,GAEPC,KAAM,G,EAYRC,eAAiB,WACfC,MAAMZ,GACHa,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZV,OAAQ,CACNC,IAAKQ,EAAKE,aAAaC,SACvBV,IAAKO,EAAKE,aAAaE,iB,uDAhBjC,WACEC,KAAKV,iBACLU,KAAKC,SAAWC,YAAYF,KAAKV,eAAgB,O,gCAGnD,WACEa,cAAcH,KAAKC,Y,oBAiBrB,WAIE,OAHAG,QAAQC,IAAI,OAAQL,KAAKf,MAAMC,OAAOC,KACtCiB,QAAQC,IAAI,OAAQL,KAAKf,MAAMC,OAAOE,KAGpC,gCACE,oBAAGkB,UAAU,SAAb,uBAAiCN,KAAKf,MAAMC,OAAOC,OACnD,oBAAGmB,UAAU,SAAb,wBAAkCN,KAAKf,MAAMC,OAAOE,OACpD,qBAAKkB,UAAU,MAAMhC,MAAO,CAACG,OAAQ,QAAS8B,MAAO,QAArD,SACE,cAAC,IAAD,CAAgBD,UAAU,MAC1BE,iBAAkB,CAACC,IA/CbC,2CAgDNxB,OAAQc,KAAKf,MAAMC,OACnBG,KAAMW,KAAKf,MAAMI,KAHjB,SAOA,cAAC,EAAD,CAEAF,IAAOa,KAAKf,MAAMC,OAAOC,IACzBC,IAAOY,KAAKf,MAAMC,OAAOE,IACzBR,IAAOA,e,GApDC+B,aCcHC,G,wDAjBb,aAAe,wC,0CAKf,WACE,OACE,sBAAKN,UAAU,KAAf,UACE,oBAAIA,UAAU,WAAd,4BACA,cAAC,EAAD,UACE,cAAC,EAAD,a,GAXQK,cCKHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAEL,cAAC,EAAD,IAASC,SAASC,eAAe,SAQrCX,M","file":"static/js/main.ea35628e.chunk.js","sourcesContent":["import React from 'react';\n\n// Scroll-able component\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid white', height: '1000px'}}>\n      {props.children}\n      \n    </div>\n  )\n\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport './map.css'\n\nconst ISS_URL = \"http://api.open-notify.org/iss-now.json\";\nconst ASTRO_URL =\"http://api.open-notify.org/astros.json\"\nconst MAP_KEY = process.env.REACT_APP_MAP_KEY;\nconst img = <img src=\"./iss.svg\" alt=\"iss\" height=\"45px\" />;\n\nconst SpaceStation = ({ img }) => <div>{img}</div>;\n\nclass Map extends Component {\n  state = {\n    center: {\n      lat: 0,\n      lng: 0,\n    },\n    zoom: 1,\n  };\n\n  componentDidMount() {\n    this.getCoordinates();\n    this.interval = setInterval(this.getCoordinates, 2000);\n  }\n\n  componentWillMount() {\n    clearInterval(this.interval);\n  }\n\n  getCoordinates = () => {\n    fetch(ISS_URL)\n      .then((res) => res.json())\n      .then((data) =>\n        this.setState({\n          center: {\n            lat: data.iss_position.latitude,\n            lng: data.iss_position.longitude,\n          },\n        })\n      );\n  };\n\n\n  render() {\n    console.log(\"LAT:\", this.state.center.lat);\n    console.log(\"LNG:\", this.state.center.lng);\n\n    return (\n      <div>\n        <p className='coords'>Latitude: {this.state.center.lat}</p>\n        <p className='coords'>Longitude: {this.state.center.lng}</p>\n        <div className='map' style={{height: '100vh', width: '100%'}}>\n          <GoogleMapReact className='map'\n          bootstrapURLKeys={{key: MAP_KEY}}\n          center={this.state.center}\n          zoom={this.state.zoom}\n          >\n\n         \n          <SpaceStation\n\n          lat = {this.state.center.lat}\n          lng = {this.state.center.lng}\n          img = {img}\n          />\n          </GoogleMapReact>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport Scroll from \"../components/Scroll\";\nimport Map from \"../components/Map\"\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n  }\n\n  render() {\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1 title\">Follow the ISS</h1>\n        <Scroll>\n          <Map />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\nReactDOM.render(\n \n    <App />, document.getElementById('root')\n  \n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}